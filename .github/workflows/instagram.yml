name: Fetch Instagram Posts

on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

jobs:
  fetch-instagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pillow

      - name: Fetch Instagram posts
        env:
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
        run: |
          # Create directories if they don't exist
          mkdir -p assets/data/instagram
          mkdir -p assets/data/instagram/images
          
          # Create a temporary file for storing all posts
          echo '{"data":[]}' > assets/data/temp-posts.json
          
          # Initialize variables
          NEXT_URL="https://graph.instagram.com/me/media?limit=50&fields=id,caption,media_type,media_url,permalink,timestamp&access_token=$INSTAGRAM_ACCESS_TOKEN"
          POSTS_COUNT=0
          MAX_POSTS=120
          
          # Create Python script to download and process media
          cat > download_media.py << 'EOF'
          import json
          import os
          import requests
          from PIL import Image
          from io import BytesIO
          
          def download_media(url, post_id):
              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  
                  # Save original image
                  img = Image.open(BytesIO(response.content))
                  img_path = f'assets/data/instagram/images/{post_id}.jpg'
                  img.save(img_path, 'JPEG', quality=85)
                  
                  return f'/assets/data/instagram/images/{post_id}.jpg'
              except Exception as e:
                  print(f"Error downloading media for post {post_id}: {e}")
                  return None
          
          def process_posts(posts_file):
              with open(posts_file, 'r') as f:
                  data = json.load(f)
              
              for post in data['data']:
                  if post['media_type'] in ['IMAGE', 'CAROUSEL_ALBUM']:
                      local_url = download_media(post['media_url'], post['id'])
                      if local_url:
                          post['media_url'] = local_url
              
              with open(posts_file, 'w') as f:
                  json.dump(data, f, indent=2)
          
          if __name__ == '__main__':
              process_posts('assets/data/temp-posts.json')
          EOF
          
          # Function to merge posts
          merge_posts() {
            local temp_file="$1"
            local new_posts="$2"
            jq -s '.[0].data + .[1].data | {data: .}' "$temp_file" "$new_posts"
          }
          
          while [ -n "$NEXT_URL" ] && [ $POSTS_COUNT -lt $MAX_POSTS ]; do
            # Fetch posts
            curl -s "$NEXT_URL" > assets/data/current-batch.json
            
            # Get next page URL
            NEXT_URL=$(jq -r '.paging.next // empty' assets/data/current-batch.json)
            
            # Merge with existing posts
            merge_posts assets/data/temp-posts.json assets/data/current-batch.json > assets/data/merged.json
            mv assets/data/merged.json assets/data/temp-posts.json
            
            # Update count
            POSTS_COUNT=$(jq '.data | length' assets/data/temp-posts.json)
          done
          
          # Download and process media files
          python download_media.py
          
          # Move final file to destination
          mv assets/data/temp-posts.json assets/data/instagram-posts.json
          
          # Clean up temporary files
          rm -f assets/data/current-batch.json download_media.py

      - name: Commit and push if there are changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add assets/data/instagram-posts.json assets/data/instagram/images/
          git commit -m "Update Instagram posts" || exit 0
          git push
