import config from './config.js';

let posts = []; // Global variable to store posts
let currentPostIndex = 0;
let currentPage = 1;

function initTouchGestures() {
    const modal = document.getElementById('modal');
    const modalContent = document.querySelector('.modallic-content');
    const hammer = new Hammer(modalContent);
    
    // Configure horizontal swipe
    hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });
    
    hammer.on('swipeleft', function() {
        if (currentPostIndex < posts.length - 1) {
            nextPost();
        }
    });
    
    hammer.on('swiperight', function() {
        if (currentPostIndex > 0) {
            prevPost();
        }
    });
}

function showMorePosts() {
    const startIndex = (currentPage - 1) * config.postsPerPage;
    const endIndex = startIndex + config.postsPerPage;
    const postsToShow = posts.slice(startIndex, endIndex);
    
    postsToShow.forEach((post, index) => {
        const div = document.createElement('div');
        div.className = 'flow';

        const img = document.createElement('img');
        img.className = 'img';
        img.src = post.media_url;
        img.alt = post.caption || 'Instagram post';
        img.loading = 'lazy';
        
        // Add click event listener to show the modal
        div.addEventListener('click', () => {
            showPost(startIndex + index);
            document.getElementById('modal').style.display = 'flex';
        });

        div.appendChild(img);
        document.getElementById('gallery').appendChild(div);
    });
    
    // Show/hide load more button
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    if (endIndex >= posts.length) {
        loadMoreBtn.style.display = 'none';
    } else {
        loadMoreBtn.style.display = 'block';
    }
}

function showPost(index) {
    if (index >= 0 && index < posts.length) {
        currentPostIndex = index;
        const post = posts[index];
        const modalImg = document.getElementById('modalImage');
        const modalCaption = document.getElementById('modalCaption');
        const modalLink = document.getElementById('modalLink');
        
        modalImg.src = post.media_url;
        modalCaption.textContent = post.caption || '';
        modalLink.href = post.permalink;
        
        // Update navigation buttons visibility
        document.querySelector('.prev-btn').style.display = index === 0 ? 'none' : 'block';
        document.querySelector('.next-btn').style.display = index === posts.length - 1 ? 'none' : 'block';
    }
}

function nextPost() {
    if (currentPostIndex < posts.length - 1) {
        showPost(currentPostIndex + 1);
    }
}

function prevPost() {
    if (currentPostIndex > 0) {
        showPost(currentPostIndex - 1);
    }
}

async function loadInstagramPosts() {
    const gallery = document.getElementById('gallery');
    if (!gallery) {
        console.error('Gallery element not found!');
        return;
    }
    
    gallery.innerHTML = '<div class="loading">Loading posts...</div>';
    
    try {
        // Load the JSON file generated by the GitHub Actions workflow
        const response = await fetch('assets/data/instagram-posts.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        gallery.innerHTML = '';

        if (!data.data || data.data.length === 0) {
            gallery.innerHTML = '<div class="error">No posts found</div>';
            return;
        }

        // Store posts globally and filter media types
        posts = data.data.filter(post => 
            post.media_type === 'IMAGE' || post.media_type === 'CAROUSEL_ALBUM'
        );

        // Create post elements with error handling for onclick
        posts.forEach((post, index) => {
            const postElement = document.createElement('div');
            postElement.className = 'post';
            postElement.innerHTML = `
                <img src="${post.media_url}" alt="Instagram post" loading="lazy">
            `;
            
            // Safely add onclick event
            try {
                postElement.onclick = () => {
                    currentPostIndex = index;
                    openModal(post);
                };
            } catch (clickError) {
                console.error('Error setting onclick for post:', clickError);
            }
            
            gallery.appendChild(postElement);
        });

        // Initialize first post if exists
        if (posts.length > 0) {
            showPost(0);
        }
    } catch (error) {
        console.error('Error loading Instagram posts:', error);
        gallery.innerHTML = `<div class="error">Error loading posts: ${error.message}</div>`;
    }
}

function openModal(post) {
    const modal = document.getElementById('postModal');
    const modalContent = document.getElementById('modalContent');
    
    if (!modal || !modalContent) {
        console.error('Modal elements not found!');
        return;
    }
    
    // Clear previous content
    modalContent.innerHTML = '';
    
    // Create modal content
    const modalImage = document.createElement('img');
    modalImage.src = post.media_url;
    modalImage.alt = 'Instagram post';
    modalImage.className = 'modal-image';
    
    const modalCaption = document.createElement('p');
    modalCaption.textContent = post.caption || '';
    
    // Add navigation buttons with fallback
    const prevButton = document.createElement('button');
    prevButton.innerHTML = '&lt;'; // Fallback left arrow
    prevButton.onclick = prevPost;
    
    const nextButton = document.createElement('button');
    nextButton.innerHTML = '&gt;'; // Fallback right arrow
    nextButton.onclick = nextPost;
    
    // Try to add Ionic icons if available
    try {
        const ionPrevIcon = document.createElement('ion-icon');
        ionPrevIcon.setAttribute('name', 'arrow-back');
        prevButton.innerHTML = '';
        prevButton.appendChild(ionPrevIcon);
        
        const ionNextIcon = document.createElement('ion-icon');
        ionNextIcon.setAttribute('name', 'arrow-forward');
        nextButton.innerHTML = '';
        nextButton.appendChild(ionNextIcon);
    } catch (iconError) {
        console.warn('Could not add Ionic icons:', iconError);
    }
    
    modalContent.appendChild(modalImage);
    modalContent.appendChild(modalCaption);
    modalContent.appendChild(prevButton);
    modalContent.appendChild(nextButton);
    
    modal.style.display = 'block';
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', loadInstagramPosts);
